

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    
    container_name: fastapi

    ports:
      - 8000:8000
    depends_on:
      - mongo
      - redis
      - nginx 
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - MONGO_DB=tg_test
      - MAX_CONNECTIONS_COUNT=15
      - MIN_CONNECTIONS_COUNT=7
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1

  bot:
    build:
      context: src/bot
      dockerfile: Dockerfile.bot
    container_name: telegram_bot
    depends_on:
      - app
      - nginx
    environment:
      - API_URL=http://nginx:80
      - TG_API_TOKEN=7205215096:AAEAeUNpG65vQmsOwI8-UeyLJoYExa0JtT4
    
  mongo:
    image: mongo:latest
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - 6379:6379
  
  nginx:
    image: nginx:latest
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    






# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

